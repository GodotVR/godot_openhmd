
# Workflow to automatically compile a Linux/Windows library on commit/push
name: Build on push

# Controls when the action will run. Triggers the workflow on push or pull request
# events, but only for the master branch we'll create .zip files
on:
  [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds the plugin for our target platforms
  build:
    name: Building for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          #- os: ubuntu-20.04
          #  platform: linux
          - os: windows-latest
            platform: windows
          #- os: macOS-latest
          #  platform: osx

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Install scons (Ubuntu)
      run: |
        sudo apt install scons
      if: matrix.os == 'ubuntu-20.04'

    - name: Install scons (Windows)
      run: |
        pip install scons
      if: matrix.os == 'windows-latest'

    - name: Install scons (macOS)
      run: |
        brew install scons
      if: matrix.os == 'macos-latest'

    - name: Install libudev (Ubuntu)
      run: |
        sudo apt install libudev-dev
      if: matrix.os == 'ubuntu-20.04'

    - name: Run the build for godot_openhmd
      run: |
        cd $GITHUB_WORKSPACE
        scons platform=${{ matrix.platform }} -j2 target=release bits=64
      if: matrix.os != 'windows-latest'

    - name: Run the build for godot_openhmd (Windows)
      run: |
        cd ${env:GITHUB_WORKSPACE}
        scons platform=${{ matrix.platform }} -j2 target=release bits=64
      if: matrix.os == 'windows-latest'

    - name: Upload build files (artifacts) (Linux)
      uses: actions/upload-artifact@v2
      with:
        name: build-files-linux
        path: |
          demo/addons/godot-openhmd/bin/linux/libgodot_openhmd.so
      if: matrix.os == 'ubuntu-20.04'

    - name: Upload build files (artifacts) (Windows)
      uses: actions/upload-artifact@v2
      with:
        name: build-files-windows
        path: |
          demo/addons/godot-openhmd/bin/win64/godot_openhmd.dll
          OpenHMD/bin/win64/hidapi.dll
          OpenHMD/bin/win64/openhmd-0.dll
      if: matrix.os == 'windows-latest'

    - name: Upload build files (artifacts) (macOS)
      uses: actions/upload-artifact@v2
      with:
        name: build-files-macos
        path: |
          demo/addons/godot-openhmd/bin/osx/libgodot_openhmd.dylib
      if: matrix.os == 'macos-latest'

  # This job collects the build output and assembles the final asset (artifact)
  asset:
    name: Assembling the asset (artifact)
    runs-on: ubuntu-20.04
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'GodotVR/godot_openhmd'
          path: godot_openhmd
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: Copy files to destination
        run: |
          mkdir addons
          cp -r godot_openhmd/demo/addons/godot-openhmd addons
          # cp build-files-linux/libgodot_openhmd.so addons/godot-openhmd/bin/linux/libgodot_openhmd.so
          cp build-files-windows/godot_openhmd.dll addons/godot-openhmd/bin/win64/godot_openhmd.dll
          cp build-files-windows/openhmd-0.dll addons/godot-openhmd/bin/win64/openhmd-0.dll
          cp build-files-windows/hidapi.dll addons/godot-openhmd/bin/win64/hidapi.dll
          # cp build-files-macos/libgodot_openhmd.dylib addons/godot-openhmd/bin/macos/libgodot_openhmd.dylib
      - name: Calculate GIT short ref
        run: |
          cd godot_openhmd
          echo "GITHUB_SHA_SHORT=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
          cd ..
      - name: Clean up extracted files
        run: |
          # rm -rf build-files-linux
          rm -rf build-files-windows
          # rm -rf build-files-macos
          rm -rf godot_openhmd
          rm -rf .git
          rm addons/godot-openhmd/bin/win64/.gitignore
          rm addons/godot-openhmd/bin/macos/.gitignore
          rm addons/godot-openhmd/bin/linux/.gitignore
      - name: Zip asset
        run: |
          zip -qq -r godot-openhmd.zip .
      - name: Create release for asset
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GITHUB_SHA_SHORT }}
          release_name: Automatic build for changeset ${{ env.GITHUB_SHA_SHORT }}
          body: |
            This is an automated build for changeset ${{ env.GITHUB_SHA_SHORT }}
          draft: false
          prerelease: true
      - name: Upload asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./godot-openhmd.zip
          asset_name: godot-openhmd.zip
          asset_content_type: application/zip
